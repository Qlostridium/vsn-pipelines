Pipelines
==========

Generating a config file and running the pipeline
*************************************************

This pipeline can be configured and run on custom data with a few steps.
The recommended method is to first run ``nextflow config ...`` to generate a complete config file (with the default parameters) in your working directory.
The tool-specific parameters, as well as Docker/Singularity profiles, are included when specifying the appropriate profiles to ``nextflow config``.

1. First, update to the latest pipeline version (this will update the nextflow cache of the repository, typically located in ``~/.nextflow/assets/vib-singlecell-nf/``)::

    nextflow pull vib-singlecell-nf/vsn-pipelines


2. Next, a config file needs to be generated.
   This step will merge parameters from multiple profiles together to create a master config which specifies **all** parameters used by the pipeline.
   In this example, these are ``tenx`` for the input data, ``singularity`` to use the Singularity system (replace with ``docker`` if necessary), and ``single_sample`` to load the defaults for the single sample pipeline.
   In your working directory, run ``nextflow config ...`` with the appropriate profiles::

    nextflow config vib-singlecell-nf/vsn-pipelines \
        -profile tenx,singularity,single_sample > single_sample.config



3. Now, edits can be made to ``single_sample.config``.
   Generally, the default values are acceptable to use for a first pass, but certain variables (input directory, etc.) need to be changed.

   In particular, the following parameters are frequently modified in practice:

    * ``params.global.project_name``: a project name which will be included in some of the output file names.
    * ``params.data.tenx.cellranger_outs_dir_path``, which should point to the ``outs/`` folder generated by CellRanger (if using 10x data). See ``Information on using 10x Genomics datasets`` for additional info.
    * Filtering parameters (``params.sc.scanpy.filter``): filtering parameters, which will be applied to all samples, can be set here: min/max genes, mitochondrial read fraction, and min cells. See ``Multi-sample parameters`` for additional info on how to specify sample-specific parameters.
    * Louvain cluster resolution: ``params.sc.scanpy.clustering.resolution``.
    * For cell- and sample-level annotations, see ``here`` for additional info.


4. Run the workflow using the new config file (using ``-C`` is recommended to use **only** this file), specifying the proper workflow as the entry point::

    nextflow -C single_sample.config \
        run vib-singlecell-nf/vsn-pipelines \
        -entry single_sample


Two-pass strategy
---------------------

Typically, cell- and gene-level filtering is one of the first steps performed in the analysis pipelines.
This usually results in the pipeline being run in two passes.
In the **first pass**, the default filters are applied (which are probably not valid for new datasets), and a separate QC report is generated for each sample.
These QC reports can be inspected and the filters can be adjusted in the config file
either for all samples (by editing the ``params.sc.scanpy.filter`` settings directly, or for individual samples by using the strategy described in multi-sample parameters.
Then, the **second pass** restarts the pipeline with the correct filtering parameters applied (use ``nextflow run ... -resume`` to skip already completed steps).

Other notes
----------------
In order to run a specific pipeline (e.g. ``single_sample``),
the pipeline name must be specified as a **profile** when running ``nextflow config ...`` (so that the default parameters are included),
and as the **entry** workflow when running the pipeline with ``nextflow run``.

One exception to this is that the ``-entry`` pipeline can be one that is a subset of the one present in the config file.
For example, in a pipeline with long running step that occurs after filtering (e.g. ``single_sample_scenic``),
it can be useful to generate the full config file (``nextflow config vib-singlecell-nf/vsn-pipelines -profile single_sample_scenic``),
then run a first pass for filtering using ``nextflow run vib-singlecell-nf/vsn-pipelines -entry single_sample``, and a second pass using the full pipeline ``-entry single_sample_scenic``).

Single-sample Pipelines
***********************
Pipelines to run on a single sample or multiple samples separately and in parallel.

**single_sample** |single_sample|
----------------------------------

.. |single_sample| image:: https://github.com/vib-singlecell-nf/vsn-pipelines/workflows/single_sample/badge.svg

The ``single_sample`` workflow will process 10x data, taking in 10x-structured data, and metadata file.
The standard analysis steps are run: filtering, normalization, log-transformation, HVG selection, dimensionality reduction, clustering, and loom file generation.
The output is a loom file with the results embedded.

|Single-sample Workflow|

.. |Single-sample Workflow| image:: https://raw.githubusercontent.com/vib-singlecell-nf/vsn-pipelines/master/assets/images/single_sample.svg?sanitize=true


**single_sample_scenic** |single_sample_scenic|
-----------------------------------------------

.. |single_sample_scenic| image:: https://github.com/vib-singlecell-nf/vsn-pipelines/workflows/single_sample_scenic/badge.svg

Runs the ``single_sample`` workflow above, then runs the ``scenic`` workflow on the output, generating a comprehensive loom file with the combined results.
This could be very resource intensive, depending on the dataset.

|Single-sample SCENIC Workflow|

.. |Single-sample SCENIC Workflow| image:: https://raw.githubusercontent.com/vib-singlecell-nf/vsn-pipelines/master/assets/images/single_sample_scenic.svg?sanitize=true


**scenic** |scenic|
-------------------


.. |scenic| image:: https://github.com/vib-singlecell-nf/vsn-pipelines/workflows/scenic/badge.svg

Runs the ``scenic`` workflow alone, generating a loom file with only the SCENIC results.
Currently, the required input is a loom file (set by `params.sc.scenic.filteredLoom`).

|SCENIC Workflow|

.. |SCENIC Workflow| image:: https://raw.githubusercontent.com/vib-singlecell-nf/vsn-pipelines/master/assets/images/scenic.svg?sanitize=true


**scenic_multiruns** |scenic_multiruns| |single_sample_scenic_multiruns|
------------------------------------------------------------------------

.. |scenic_multiruns| image:: https://github.com/vib-singlecell-nf/vsn-pipelines/workflows/scenic_multiruns/badge.svg
.. |single_sample_scenic_multiruns| image:: https://github.com/vib-singlecell-nf/vsn-pipelines/workflows/single_sample_scenic_multiruns/badge.svg

Runs the ``scenic`` workflow multiple times (set by ``params.sc.scenic.numRuns``), generating a loom file with the aggregated results from the multiple SCENIC runs.

Note that this is not a complete entry-point itself, but a configuration option for the `scenic` module.
Simply adding `-profile scenic_multiruns` during the config step will activate this analysis option for any of the standard entrypoints.

|SCENIC Multi-runs Workflow|

.. |SCENIC Multi-runs Workflow| image:: https://raw.githubusercontent.com/vib-singlecell-nf/vsn-pipelines/master/assets/images/scenic_multiruns.svg?sanitize=true


**cellranger**
--------------
Runs the ``cellranger`` workflow (``makefastq``, then ``count``).
Input parameters are specified within the config file:

* ``params.sc.cellranger.mkfastq.csv``: path to the CSV samplesheet
* ``params.sc.cellranger.mkfastq.runFolder``: path of Illumina BCL run folder
* ``params.sc.cellranger.count.transcriptome``: path to the Cell Ranger compatible transcriptome reference


**nemesh**
----------
Runs the ``nemesh`` pipeline (Drop-seq) on a single sample or multiple samples separately.

`Source <http://mccarrolllab.org/wp-content/uploads/2016/03/Drop-seqAlignmentCookbookv1.2Jan2016.pdf>`_


Sample Aggregation Pipelines
****************************
Pipelines to aggregate multiple datasets together.

**bbknn** |bbknn|
-----------------

.. |bbknn| image:: https://github.com/vib-singlecell-nf/vsn-pipelines/workflows/bbknn/badge.svg

Runs the ``bbknn`` workflow (sample-specific filtering, merging of individual samples, normalization, log-transformation, HVG selection, PCA analysis, then the batch-effect correction steps: BBKNN, clustering, dimensionality reduction (UMAP only)).
The output is a loom file with the results embedded.

Source: https://github.com/Teichlab/bbknn/blob/master/examples/pancreas.ipynb

|BBKNN Workflow|

.. |BBKNN Workflow| image:: https://raw.githubusercontent.com/vib-singlecell-nf/vsn-pipelines/master/assets/images/bbknn.svg?sanitize=true


**bbknn_scenic**
----------------
Runs the ``bbknn`` workflow above, then runs the ``scenic`` workflow on the output, generating a comprehensive loom file with the combined results.
This could be very resource intensive, depending on the dataset.

|BBKNN SCENIC Workflow|

.. |BBKNN SCENIC Workflow| image:: https://raw.githubusercontent.com/vib-singlecell-nf/vsn-pipelines/master/assets/images/bbknn_scenic.svg?sanitize=true


**harmony** |harmony|
-----------------

.. |harmony| image:: https://github.com/vib-singlecell-nf/vsn-pipelines/workflows/harmony/badge.svg

Runs the ``harmony`` workflow (sample-specific filtering, merging of individual samples, normalization, log-transformation, HVG selection, PCA analysis, batch-effect correction (Harmony), clustering, dimensionality reduction (t-SNE and UMAP)).
The output is a loom file with the results embedded.

|Harmony Workflow|

.. |Harmony Workflow| image:: https://raw.githubusercontent.com/vib-singlecell-nf/vsn-pipelines/master/assets/images/harmony.svg?sanitize=true


Input Data Formats
*******************

Depending on the type of data you run the pipeline with, one or more appropriate profiles should be set when running ``nextflow config``.

Cell Ranger (10xGenomics)
-------------------------
::

    -profiles tenx


In the generated .config file, make sur the ``cellranger_outs_dir_path`` parameter is set with the paths to the Cell Ranger ``outs`` folders::

    [...]
    tenx {
        cellranger_outs_dir_path = "data/10x/1k_pbmc/1k_pbmc_*/outs/"
    }
    [...]

- The ``cellranger_outs_dir_path`` parameter accepts glob patterns and also comma separated paths.


Information on using 10x Genomics datasets
^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
Let's say the file structure of your data looks like this,

.. code::

    /home/data/
    └── cellranger
        ├── Sample A
        │   └── outs
        │       ├── filtered_feature_bc_matrix
        │       └── ...
        └── Sample_B
            └── outs
                ├── filtered_feature_bc_matrix
                └── ...

Setting the input directory appropriately will collect all the samples listed in the ``filtered_[feature|gene]_bc_matrix`` directories listed above.
For example, in ``params.data.tenx``, setting::

    cellranger_outs_dir_path = "/home/data/cellranger/Sample*/outs/"

will recursively find all 10x samples in that directory.


H5AD (Scanpy)
-------------
::

    -profiles h5ad


In the generated .config file, make sure the ``file_paths`` parameter is set with the paths to the ``.h5ad`` files::

    [...]
    h5ad {
        file_paths = "data/1k_pbmc_v*_chemistry_SUFFIX.SC__FILE_CONVERTER.h5ad"
        suffix = "_SUFFIX.SC__FILE_CONVERTER.h5ad"
    }
    [...]

- The ``suffix`` parameter is used to infer the sample name from the file paths (it is removed from the input file path to derive a sample name).
- The ``file_paths`` accepts glob patterns and also comma separated paths.

Make sure that ``sc.file_converter.iff`` is set to ``h5ad``.

Currently H5AD input is only implemented in the ``h5ad_single_sample`` entry point.

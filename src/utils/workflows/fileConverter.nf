/*
 * Conversion workflow 
 * Source:
 * 
 */ 

nextflow.preview.dsl=2

//////////////////////////////////////////////////////
//  process imports:

include SC__H5AD_TO_LOOM from './../processes/h5adToLoom.nf' params(params)
include SC__CELLRANGER_TO_H5AD from './../processes/cellRangerToH5ad.nf' params(params)
include COMPRESS_HDF5 from './../processes/utils.nf' params(params)

//////////////////////////////////////////////////////
//  Define the workflow 

inputFormatsAllowed = ['h5ad']
outputFormatsAllowed = ['loom']
formatsToCompress = ['loom']

def getCellRangerV2DataPath(dataPath) {
    return file("${dataPath.toRealPath()}/${params.sc.file_converter.useFilteredMatrix ? "filtered" : "raw"}_gene_bc_matrices/")
}

def getCellRangerV3DataPath(dataPath) {
    return file("${dataPath.toRealPath()}/${params.sc.file_converter.useFilteredMatrix ? "filtered" : "raw"}_feature_bc_matrix/")
}

def isCellRangerV2(dataPath) {
    return getCellRangerV2DataPath(dataPath).exists()
}

def isCellRangerV3(dataPath) {
    return getCellRangerV3DataPath(dataPath).exists()
}

def isCellRangerData(dataPath) {
    // if(!params.data.containsKey("tenx"))
    //     return False
    // tenxData = params.data.tenx
    // Check if output was generated with CellRanger v2 or v3 respectively
    return isCellRangerV2(dataPath) || isCellRangerV3(dataPath)
}

def getCellRangerDataPath(dataPath) {
    if(isCellRangerV2(dataPath)) {
        genomes = getCellRangerV2DataPath(dataPath).list()
        if(genomes.size() > 1 || genomes.size() == 0) {
            throw new Exception("None or multiple genomes detected for the output generated by CellRanger v2. Selecting custom genome is currently not implemented.")
        } else {
            return file(Paths.get(getCellRangerV2DataPath(dataPath).toString(), genomes[0]))
        }
    } else if(isCellRangerV3(dataPath)) {
        return getCellRangerV3DataPath(dataPath)
    } else {
        throw new Exception("Unrecognized CellRanger output folder.")
    }
}

workflow FILE_CONVERTER {

    get:
        // Required, Expects tuple(sampleId, data)
        data
        // Required, Expects string outputFormat
        outputFormat
        // Optional (in that case, populate using Channel.empty())
        // if outputFormat in ['loom'], Expects tuple(sampleId, rawFilteredData)
        rawFilteredData

    main:
        data.view()
            .branch {
                cellrangerToH5ad: isCellRangerData(it[1]) && outputFormat.toLowerCase() == 'h5ad'
                h5adToLoom: it[1].extension.toLowerCase() == 'h5ad' && outputFormat.toLowerCase() == 'loom'
                none: !inputFormatsAllowed.contains(it[1].extension.toLowerCase()) || !outputFormatsAllowed.contains(outputFormat.toLowerCase())
            }
            .set { convert }

        out = Channel.empty()

        ///////////////////////////////////////
        // Convert CELLRANGER output -> H5AD //
        ///////////////////////////////////////
        tmp = convert.cellrangerToH5ad.view { 
            "Converting CellRanger output ${it[1]} to ${it[0]}.h5ad..." 
        }.map { 
            it -> tuple(it[0], getCellRangerDataPath(it[1]))
        }.ifEmpty {
            tuple('EMPTY', null)
        } | SC__CELLRANGER_TO_H5AD
        out = out.mix(tmp)

        //////////////////////////
        // Convert H5AD -> LOOM //
        //////////////////////////
        tmp = convert.h5adToLoom.view { 
            "Converting ${it[1].baseName} to ${it[1].baseName}.loom (w/ additional compression)..." 
        }.join(
            rawFilteredData
        ).ifEmpty {
            tuple('EMPTY', null, null)
        } | SC__H5AD_TO_LOOM
        out = out.mix(tmp)

        //////////////////////////
        // Compress HDF5 files  //
        //////////////////////////
        if(formatsToCompress.contains(outputFormat)) {
            out = COMPRESS_HDF5(
                SC__H5AD_TO_LOOM.out
            )
        }
        convert.none.view { 
            "Aborting conversion of ${it[1]} to ${it[1].baseName}.loom (not implemented)" 
        }

    emit:
        out

}
